"extwallarea.Q2","intwallarea.frontwall.Q2",
"intwallarea.frontwall.Q2","extwallarea.exceptfront.Q2",
"roofareaplan.Q2", "roofareaslope.Q2",
"dpcperim.Q2", "windows.Q2",
"doors.Q2","intwallarea.extpartywalls.Q2"
)]
names(arch.sub) = c("ground floor area","internal wall area (external walls)",
"external wall area","internal wall area (front external wall only)",
"internal wall area (front external wall only)","external wall area (all exception front elevation)",
"plan roof area","slope roof area",
"DPC Perimeter","windows",
"doors","internal wall area (external and party walls)")
arch.sub = as.data.frame(t(arch.sub))
arch.sub$variaible = rownames(arch.sub)
names(arch.sub) = c("value","variable")
arch.sub = rbind(arch.sub,data.frame(value = 1, variable = "per dwelling"))
rownames(arch.sub) = 1:nrow(arch.sub)
materials.sub <- materials[materials$ID %in% options, ]
materials.sub <- materials.sub[,c("ID","compatible_standard",	"materials",	"cost",	"unit","variable")]
materials.sub = left_join(materials.sub, arch.sub, by = "variable")
materials.sub$cost_total = materials.sub$cost * materials.sub$value
total.cost = sum(materials.sub$cost_total, na.rm = T)
materials.sub$cost_total[materials.sub$variable == "percent1"] = total.cost/100
materials.sub$cost_total[materials.sub$variable == "percent4"] = total.cost/100 * 4
materials.sub$cost_total[materials.sub$variable == "percent12"] = total.cost/100 * 12
materials.sub = materials.sub[,c("ID","compatible_standard","cost_total")]
return(materials.sub)
}
costs.list.x = lapply(1:nrow(arch), cost.options, type = "x")
costs.list.y = lapply(1:nrow(arch), cost.options, type = "y")
costs.list.z = lapply(1:nrow(arch), cost.options, type = "z")
i = 1
type = "z"
if(type == "x"){
costs.sub = costs.list.x[[i]]
}else if(type == "y"){
costs.sub = costs.list.y[[i]]
}else if(type == "z"){
costs.sub = costs.list.z[[i]]
}else{
message("No Type")
stop()
}
options.sub = retrofit.options[retrofit.options$ID %in% costs.sub$ID,]
options.sub = options.sub[,c("ID","compatible_standard")]
costs.sub = costs.sub %>%
group_by(ID) %>%
summarise(cost = sum(cost_total))
costs.sub = left_join(costs.sub, options.sub, by = c("ID"))
costs.sub$sel = grepl("1",unlist(costs.sub$`compatible_standard`, recursive=FALSE))
costs.sub$type = substr(costs.sub$ID,1,2)
costs.sub$sel = grepl("1",unlist(costs.sub$`compatible_standard`, recursive=FALSE))
costs.sub$type = substr(costs.sub$ID,1,2)
costs.sub.a = costs.sub[!costs.sub$sel,]
costs.sub.b = costs.sub[costs.sub$sel,]
costs.sub.c = costs.sub.b %>%
group_by(type) %>%
summarise(ID = paste(unique(ID), collapse = " "),
mincost = min(cost),
maxcost = max(cost),
avecost = mean(cost),
standard = unique(compatible_standard))
View(costs.sub.c)
costs.sub.c = costs.sub.b %>%
group_by(type) %>%
summarise(ID = paste(unique(ID), collapse = " "),
mincost = min(cost),
maxcost = max(cost),
avecost = mean(cost),
compatible_standard = unique(compatible_standard))
View(costs.sub.c)
names(costs.sub.a)
costs.sub.c = costs.sub.b %>%
group_by(type) %>%
summarise(ID = paste(unique(ID), collapse = " "),
#mincost = min(cost),
#maxcost = max(cost),
cost = mean(cost),
compatible_standard = unique(compatible_standard))
costs.sub.c = costs.sub.c[,c("ID","cost","compatible_standard","type")]
costs.sub.fin = rbind(costs.sub.a,costs.sub.c)
costs.sub.a
costs.sub.c
costs.sub.a = costs.sub.a[,c("ID","cost","compatible_standard","type")]
costs.sub.c = costs.sub.c[,c("ID","cost","compatible_standard","type")]
costs.sub.fin = rbind(costs.sub.a,costs.sub.c)
costs.sub.fin
duplicate.options = function(costs.sub){
costs.sub$sel = grepl("1",unlist(costs.sub$`compatible_standard`, recursive=FALSE))
costs.sub$type = substr(costs.sub$ID,1,2)
#costs.sub$min = suppressWarnings(sapply(costs.sub$type,function(x){min(costs.sub$cost[costs.sub$type == x & costs.sub$sel], na.rm = T)}))
#costs.sub$average = suppressWarnings(sapply(costs.sub$type,function(x){mean(costs.sub$cost[costs.sub$type == x & costs.sub$sel], na.rm = T)}))
#costs.sub = costs.sub[!costs.sub$sel | (costs.sub$sel &  costs.sub$cost == costs.sub$min), ]
costs.sub.a = costs.sub[!costs.sub$sel,]
costs.sub.b = costs.sub[costs.sub$sel,]
costs.sub.c = costs.sub.b %>%
group_by(type) %>%
summarise(ID = paste(unique(ID), collapse = " "),
#mincost = min(cost),
#maxcost = max(cost),
cost = mean(cost),
compatible_standard = unique(compatible_standard))
costs.sub.a = costs.sub.a[,c("ID","cost","compatible_standard","type")]
costs.sub.c = costs.sub.c[,c("ID","cost","compatible_standard","type")]
costs.sub.fin = rbind(costs.sub.a,costs.sub.c)
return(costs.sub)
}
duplicate.options = function(costs.sub){
costs.sub$sel = grepl("1",unlist(costs.sub$`compatible_standard`, recursive=FALSE))
costs.sub$type = substr(costs.sub$ID,1,2)
#costs.sub$min = suppressWarnings(sapply(costs.sub$type,function(x){min(costs.sub$cost[costs.sub$type == x & costs.sub$sel], na.rm = T)}))
#costs.sub$average = suppressWarnings(sapply(costs.sub$type,function(x){mean(costs.sub$cost[costs.sub$type == x & costs.sub$sel], na.rm = T)}))
#costs.sub = costs.sub[!costs.sub$sel | (costs.sub$sel &  costs.sub$cost == costs.sub$min), ]
costs.sub.a = costs.sub[!costs.sub$sel,]
costs.sub.b = costs.sub[costs.sub$sel,]
costs.sub.c = costs.sub.b %>%
group_by(type) %>%
summarise(ID = paste(unique(ID), collapse = " "),
#mincost = min(cost),
#maxcost = max(cost),
cost = mean(cost),
compatible_standard = unique(compatible_standard))
costs.sub.a = costs.sub.a[,c("ID","cost","compatible_standard","type")]
costs.sub.c = costs.sub.c[,c("ID","cost","compatible_standard","type")]
costs.sub.fin = rbind(costs.sub.a,costs.sub.c)
return(costs.sub.fin)
}
clean.duplicateds = function(i, type){
if(type == "x"){
costs.sub = costs.list.x[[i]]
}else if(type == "y"){
costs.sub = costs.list.y[[i]]
}else if(type == "z"){
costs.sub = costs.list.z[[i]]
}else{
message("No Type")
stop()
}
options.sub = retrofit.options[retrofit.options$ID %in% costs.sub$ID,]
options.sub = options.sub[,c("ID","compatible_standard")]
costs.sub = costs.sub %>%
group_by(ID) %>%
summarise(cost = sum(cost_total))
costs.sub = left_join(costs.sub, options.sub, by = c("ID"))
costs.sub = duplicate.options(costs.sub = costs.sub)
return(costs.sub)
}
costs.list.x.clean = lapply(1:length(costs.list.x), clean.duplicateds, type = "x")
costs.list.y.clean = lapply(1:length(costs.list.y), clean.duplicateds, type = "y")
costs.list.z.clean = lapply(1:length(costs.list.z), clean.duplicateds, type = "z")
arch$costs.x = costs.list.x.clean
arch$costs.y = costs.list.y.clean
arch$costs.z = costs.list.z.clean
arch$costs.x.total = round(sapply(arch$costs.x,function(x){sum(x$cost)}),0)
arch$costs.y.total = round(sapply(arch$costs.y,function(x){sum(x$cost)}),0)
arch$costs.z.total = round(sapply(arch$costs.z,function(x){sum(x$cost)}),0)
saveRDS(arch,"../jobs_data/archetype_withcosts.Rds")
summary(arch$costs.x.total[arch$ndwel > 20000]) #gets 80% of the stock for only 13% of the archetypes
summary(arch$costs.y.total[arch$ndwel > 20000])
summary(arch$costs.z.total[arch$ndwel > 20000])
arch_interesting = arch[arch$costs.x.total %in% c(124,2898,3617,3906,5314,7967) |
arch$costs.y.total %in% c(9420,11809,14032,16319,25814) |
arch$costs.z.total %in% c(55987,65072,70151,77649,101856)
,]
arch_interesting = arch_interesting[arch_interesting$ndwel > 20000,]
arch_interesting$retrofit.options.x = lapply(arch_interesting$costs.x, function(x){paste(x$ID, collapse = " ")})
arch_interesting$retrofit.options.y = lapply(arch_interesting$costs.y, function(x){paste(x$ID, collapse = " ")})
arch_interesting$retrofit.options.z = lapply(arch_interesting$costs.z, function(x){paste(x$ID, collapse = " ")})
arch_interesting$costs.x = NULL
arch_interesting$costs.y = NULL
arch_interesting$costs.z = NULL
arch_interesting = t(arch_interesting)
write.csv(arch_interesting,"../jobs_data/archetype_examples.csv")
View(arch_interesting)
arch_interesting = arch[arch$costs.x.total %in% c(124,2898,3617,3906,5314,7967) |
arch$costs.y.total %in% c(9420,11809,14032,16319,25814) |
arch$costs.z.total %in% c(55987,65072,70151,77649,101856)
,]
?quantile
arch_interesting = arch[arch$costs.x.total %in% c(min(arch$costs.x.total[arch$ndwel > 20000]),quantile(arch$costs.x.total[arch$ndwel > 20000], probs = 0.25),median(arch$costs.x.total[arch$ndwel > 20000]),mean(arch$costs.x.total[arch$ndwel > 20000]),quantile(arch$costs.x.total[arch$ndwel > 20000], probs = 0.75),max(arch$costs.x.total[arch$ndwel > 20000])) |
arch$costs.y.total %in% c(min(arch$costs.y.total[arch$ndwel > 20000]),quantile(arch$costs.y.total[arch$ndwel > 20000], probs = 0.25),median(arch$costs.y.total[arch$ndwel > 20000]),mean(arch$costs.y.total[arch$ndwel > 20000]),quantile(arch$costs.y.total[arch$ndwel > 20000], probs = 0.75),max(arch$costs.y.total[arch$ndwel > 20000])) |
arch$costs.z.total %in% c(min(arch$costs.z.total[arch$ndwel > 20000]),quantile(arch$costs.z.total[arch$ndwel > 20000], probs = 0.25),median(arch$costs.z.total[arch$ndwel > 20000]),mean(arch$costs.z.total[arch$ndwel > 20000]),quantile(arch$costs.z.total[arch$ndwel > 20000], probs = 0.75),max(arch$costs.z.total[arch$ndwel > 20000]))
,]
summary(costs.list.z.clean)
summary(arch$costs.z.total)
View(arch)
View(arch)
arch$costs.z[12]
library(dplyr)
file.path = "D:/Users/earmmor/OneDrive - University of Leeds/GLIDER/03 Work Packages/WP2 Economic risks/Retrofit_specs_unit_costs_machine_readable_v6.xlsx"
retrofit.options <- readxl::read_xlsx(file.path, sheet = "by_retrofit_option")
names(retrofit.options) <- c("ID","sub-project","variations","options","compatible_standard","materials","hired plant","labour","wall",	"floor",	"roof",	"solar",	"window",	"energy",	"type")
retrofit.options <- retrofit.options[3:nrow(retrofit.options),]
retrofit.options <- retrofit.options[!is.na(retrofit.options$ID),]
materials <- readxl::read_xlsx(file.path, sheet = "materials_list")
names(materials) <- c("ID",	"sub-project",	"variations",	"options",	"compatible_standard",	"materials",	"cost",	"unit","variable",	"notes",	"sources")
materials <- materials[materials$ID != "NONE",]
materials <- materials[3:nrow(materials),]
materials <- as.data.frame(materials)
materials$cost = as.numeric(materials$cost)
arch <- read.csv("../jobs_data/archetype_summary.csv", stringsAsFactors = F)
retrofit.options$wall <- strsplit(gsub(" ","",retrofit.options$wall), ",")
retrofit.options$floor <- strsplit(gsub(" ","",retrofit.options$floor), ",")
retrofit.options$roof <- strsplit(gsub(" ","",retrofit.options$roof), ",")
retrofit.options$solar <- strsplit(gsub(" ","",retrofit.options$solar), ",")
retrofit.options$window <- strsplit(gsub(" ","",retrofit.options$window), ",")
retrofit.options$energy <- strsplit(gsub(" ","",retrofit.options$energy), ",")
retrofit.options$type <- strsplit(gsub(" ","",retrofit.options$type), ",")
retrofit.options.x <- retrofit.options[grepl("X",retrofit.options$`compatible_standard`),]
retrofit.options.y <- retrofit.options[grepl("Y",retrofit.options$`compatible_standard`),]
retrofit.options.z <- retrofit.options[grepl("Z",retrofit.options$`compatible_standard`),]
get.options <- function(a, data){
#Get Codes
code <- arch$archcode[a]
wall.id <- substr(code,3,3)
floor.id <- substr(code,5,5)
roof.id <- substr(code,7,7)
solar.id <- substr(code,9,9)
window.id <- substr(code,11,11)
energy.id <- substr(code,13,13)
type.id <- substr(code,1,1)
retrofit.options.sub <- data[(unlist(lapply(data$wall, function(x) {wall.id %in% x})) | data$wall == "All") &
(unlist(lapply(data$floor, function(x) {floor.id %in% x})) | data$floor == "All") &
(unlist(lapply(data$roof, function(x) {roof.id %in% x})) | data$roof == "All") &
(unlist(lapply(data$solar, function(x) {solar.id %in% x})) | data$solar == "All") &
(unlist(lapply(data$window, function(x) {window.id %in% x})) | data$window == "All") &
(unlist(lapply(data$energy, function(x) {energy.id %in% x})) | data$energy == "All") &
(unlist(lapply(data$type, function(x) {type.id %in% x})) | data$type == "All")
,]
return(retrofit.options.sub$ID)
}
get.options(1, retrofit.options.x)
get.options(1, retrofit.options.y)
get.options(1, retrofit.options.z)
arch$retrofit.options.x <- lapply(1:nrow(arch), get.options, data = retrofit.options.x)
arch$retrofit.options.y <- lapply(1:nrow(arch), get.options, data = retrofit.options.y)
arch$retrofit.options.z <- lapply(1:nrow(arch), get.options, data = retrofit.options.z)
summary(lengths(arch$retrofit.options.x))
summary(lengths(arch$retrofit.options.y))
summary(lengths(arch$retrofit.options.z))
saveRDS(arch,"../jobs_data/archetype_summary_retrofitopts_gavin.Rds")
cost.options <- function(x, type){
arch.sub = arch[x,]
if(type == "x"){
options <- unlist(arch.sub$retrofit.options.x)
}else if(type == "y"){
options <- unlist(arch.sub$retrofit.options.y)
}else if(type == "z"){
options <- unlist(arch.sub$retrofit.options.z)
}else{
message("No Type")
stop()
}
arch.sub = arch.sub[,c("groundfloorarea.Q2","intwallarea.extwalls.Q2",
"extwallarea.Q2","intwallarea.frontwall.Q2",
"intwallarea.frontwall.Q2","extwallarea.exceptfront.Q2",
"roofareaplan.Q2", "roofareaslope.Q2",
"dpcperim.Q2", "windows.Q2",
"doors.Q2","intwallarea.extpartywalls.Q2"
)]
names(arch.sub) = c("ground floor area","internal wall area (external walls)",
"external wall area","internal wall area (front external wall only)",
"internal wall area (front external wall only)","external wall area (all exception front elevation)",
"plan roof area","slope roof area",
"DPC Perimeter","windows",
"doors","internal wall area (external and party walls)")
arch.sub = as.data.frame(t(arch.sub))
arch.sub$variaible = rownames(arch.sub)
names(arch.sub) = c("value","variable")
arch.sub = rbind(arch.sub,data.frame(value = 1, variable = "per dwelling"))
rownames(arch.sub) = 1:nrow(arch.sub)
materials.sub <- materials[materials$ID %in% options, ]
materials.sub <- materials.sub[,c("ID","compatible_standard",	"materials",	"cost",	"unit","variable")]
materials.sub = left_join(materials.sub, arch.sub, by = "variable")
materials.sub$cost_total = materials.sub$cost * materials.sub$value
total.cost = sum(materials.sub$cost_total, na.rm = T)
materials.sub$cost_total[materials.sub$variable == "percent1"] = total.cost/100
materials.sub$cost_total[materials.sub$variable == "percent4"] = total.cost/100 * 4
materials.sub$cost_total[materials.sub$variable == "percent12"] = total.cost/100 * 12
materials.sub = materials.sub[,c("ID","compatible_standard","cost_total")]
return(materials.sub)
}
costs.list.x = lapply(1:nrow(arch), cost.options, type = "x")
costs.list.y = lapply(1:nrow(arch), cost.options, type = "y")
costs.list.z = lapply(1:nrow(arch), cost.options, type = "z")
duplicate.options = function(costs.sub){
costs.sub$sel = grepl("1",unlist(costs.sub$`compatible_standard`, recursive=FALSE))
costs.sub$type = substr(costs.sub$ID,1,2)
#costs.sub$min = suppressWarnings(sapply(costs.sub$type,function(x){min(costs.sub$cost[costs.sub$type == x & costs.sub$sel], na.rm = T)}))
#costs.sub$average = suppressWarnings(sapply(costs.sub$type,function(x){mean(costs.sub$cost[costs.sub$type == x & costs.sub$sel], na.rm = T)}))
#costs.sub = costs.sub[!costs.sub$sel | (costs.sub$sel &  costs.sub$cost == costs.sub$min), ]
costs.sub.a = costs.sub[!costs.sub$sel,]
costs.sub.b = costs.sub[costs.sub$sel,]
costs.sub.c = costs.sub.b %>%
group_by(type) %>%
summarise(ID = paste(unique(ID), collapse = " "),
#mincost = min(cost),
#maxcost = max(cost),
cost = mean(cost),
compatible_standard = unique(compatible_standard))
costs.sub.a = costs.sub.a[,c("ID","cost","compatible_standard","type")]
costs.sub.c = costs.sub.c[,c("ID","cost","compatible_standard","type")]
costs.sub.fin = rbind(costs.sub.a,costs.sub.c)
return(costs.sub.fin)
}
clean.duplicateds = function(i, type){
if(type == "x"){
costs.sub = costs.list.x[[i]]
}else if(type == "y"){
costs.sub = costs.list.y[[i]]
}else if(type == "z"){
costs.sub = costs.list.z[[i]]
}else{
message("No Type")
stop()
}
options.sub = retrofit.options[retrofit.options$ID %in% costs.sub$ID,]
options.sub = options.sub[,c("ID","compatible_standard")]
costs.sub = costs.sub %>%
group_by(ID) %>%
summarise(cost = sum(cost_total))
costs.sub = left_join(costs.sub, options.sub, by = c("ID"))
costs.sub = duplicate.options(costs.sub = costs.sub)
return(costs.sub)
}
costs.list.x.clean = lapply(1:length(costs.list.x), clean.duplicateds, type = "x")
costs.list.y.clean = lapply(1:length(costs.list.y), clean.duplicateds, type = "y")
costs.list.z.clean = lapply(1:length(costs.list.z), clean.duplicateds, type = "z")
arch$costs.x = costs.list.x.clean
arch$costs.y = costs.list.y.clean
arch$costs.z = costs.list.z.clean
arch$costs.x.total = round(sapply(arch$costs.x,function(x){sum(x$cost)}),0)
arch$costs.y.total = round(sapply(arch$costs.y,function(x){sum(x$cost)}),0)
arch$costs.z.total = round(sapply(arch$costs.z,function(x){sum(x$cost)}),0)
saveRDS(arch,"../jobs_data/archetype_withcosts.Rds")
summary(arch$costs.x.total[arch$ndwel > 20000]) #gets 80% of the stock for only 13% of the archetypes
summary(arch$costs.y.total[arch$ndwel > 20000])
summary(arch$costs.z.total[arch$ndwel > 20000])
arch_interesting = arch[arch$costs.x.total %in% c(min(arch$costs.x.total[arch$ndwel > 20000]),quantile(arch$costs.x.total[arch$ndwel > 20000], probs = 0.25),median(arch$costs.x.total[arch$ndwel > 20000]),mean(arch$costs.x.total[arch$ndwel > 20000]),quantile(arch$costs.x.total[arch$ndwel > 20000], probs = 0.75),max(arch$costs.x.total[arch$ndwel > 20000])) |
arch$costs.y.total %in% c(min(arch$costs.y.total[arch$ndwel > 20000]),quantile(arch$costs.y.total[arch$ndwel > 20000], probs = 0.25),median(arch$costs.y.total[arch$ndwel > 20000]),mean(arch$costs.y.total[arch$ndwel > 20000]),quantile(arch$costs.y.total[arch$ndwel > 20000], probs = 0.75),max(arch$costs.y.total[arch$ndwel > 20000])) |
arch$costs.z.total %in% c(min(arch$costs.z.total[arch$ndwel > 20000]),quantile(arch$costs.z.total[arch$ndwel > 20000], probs = 0.25),median(arch$costs.z.total[arch$ndwel > 20000]),mean(arch$costs.z.total[arch$ndwel > 20000]),quantile(arch$costs.z.total[arch$ndwel > 20000], probs = 0.75),max(arch$costs.z.total[arch$ndwel > 20000]))
,]
arch_interesting = arch_interesting[arch_interesting$ndwel > 20000,]
arch_interesting$retrofit.options.x = lapply(arch_interesting$costs.x, function(x){paste(x$ID, collapse = " ")})
arch_interesting$retrofit.options.y = lapply(arch_interesting$costs.y, function(x){paste(x$ID, collapse = " ")})
arch_interesting$retrofit.options.z = lapply(arch_interesting$costs.z, function(x){paste(x$ID, collapse = " ")})
arch_interesting$costs.x = NULL
arch_interesting$costs.y = NULL
arch_interesting$costs.z = NULL
arch_interesting = t(arch_interesting)
write.csv(arch_interesting,"../jobs_data/archetype_examples.csv")
write.csv(arch_interesting,"../jobs_data/archetype_examples.csv")
comb <- readRDS("../jobs_data/combined_2013_arch.Rds")
comb$archcode <- as.character(comb$archcode)
arsum_type <- data.frame(id = c("A","B","C","F","G","H","I"), desc = c("Semi Detached/End Terrace",
"Detached","Mid terrace",
"Bungalow",
"converted flat",
"Low rise flat",
"High rise flat"), stringsAsFactors = F)
arsum_wall <- data.frame(id = c("A","B","C","D"), desc = c("Masonry Cavity","Soild Masonry","Concrete / Other","Mixed"), stringsAsFactors = F)
arsum_window <- data.frame(id = c("A","B","C","D"), desc = c("Entire house","More than half","Less than half","No double glazing"), stringsAsFactors = F)
arsum_energy <- data.frame(id = c("L","A","B","C","H","E","W","D","K","G","F"), desc = c("Other central heating e.g. coal / electric",
"Gas central heating & Water, without Tank",
"Gas central heating & Water, with Immersion Heater",
"Gas central heating & Water, with hot water tank",
"Gas central heating with separate hot water system",
"Oil central heating",
"Wood fuelled central heating",
"Storage Heaters",
"Other heating e.g. Warm Air/ Electric Underfloor",
"Communal Heating System",
"Room Heaters"), stringsAsFactors = F)
arsum_roof <- data.frame(id = c("A","B","C"), desc = c("Pitched no attic","Pitched with attic","Flat"), stringsAsFactors = F)
arsum_solar <- data.frame(id = c("A","B"), desc = c("Yes","No"), stringsAsFactors = F)
arsum_floor <- data.frame(id = c("A","B","C"), desc = c("Concrete Floors","Suspended Timber Floor","Historic"), stringsAsFactors = F)
comb$cheight0[is.na(comb$cheight0)] = median(comb$cheight0, na.rm = T )
comb$cheight1[is.na(comb$cheight1)] = median(comb$cheight0, na.rm = T )
comb$groundfloorarea <- ifelse(comb$dwtypenx %in% c("converted flat","purpose built flat, low rise","purpose built flat, high rise"),
comb$floorx,
comb$floorx / comb$storeyx)
comb$extwallarea <- ifelse(comb$dwtypenx %in% c("converted flat","purpose built flat, low rise","purpose built flat, high rise"),
comb$wall.area.ext / comb$storeyx,
comb$dpc.perim * comb$cheight0 * comb$storeyx)
names(comb)
summary(comb$NFlorm)
summary(comb$storeyx)
summary(comb$NFlorm == comb$storeyx)
foo = comb[comb$NFlorm != comb$storeyx,]
View(foo)
foo = comb[comb$archcode == "H-A-A-A-A-A-G",]
View(foo)
foo$wall.area.ext
foo$wall.area.ext / foo$storeyx
comb$extwallarea.alt <- ifelse(comb$dwtypenx %in% c("converted flat","purpose built flat, low rise","purpose built flat, high rise"),
sqrt(comb$floorx) * 2 * comb$cheight0,
comb$dpc.perim * comb$cheight0 * comb$storeyx)
plot(comb$extwallarea.alt, comb$extwallarea)
plot(comb$extwallarea, comb$extwallarea.alt)
hist(comb$extwallarea)
hist(comb$extwallarea.alt)
source('D:/Users/earmmor/GitHub/glider/jobs_code/summarise_archetypes2.R', echo=TRUE)
x1 = sample(seq(0,10,0.1), 10)
y1 = sample(seq(0,10,0.1), 10)
x2 = sample(seq(0,10,0.1), 2)
y2 = sample(seq(0,10,0.1), 2)
p1 = st_point(matrix(c(x1,y1)))
library(sf)
p1 = st_point(matrix(c(x1,y1)))
source('~/.active-rstudio-document', echo=TRUE)
p1 = st_point(matrix(c(x1,y1), ncol = 2))
matrix(c(x1,y1), ncol = 2)
?st_point
p1 = st_multipoint(matrix(c(x1,y1), ncol = 2))
p1 = st_cast(st_multipoint(matrix(c(x1,y1), ncol = 2)), "POINT")
st_cast
?st_cast
p1 = st_cast(st_multipoint(matrix(c(x1,y1), ncol = 2)), "POINT", group_or_split = TRUE)
p1 = st_mulipoint(matrix(c(x1,y1), ncol = 2)), "POINT", )
p1 = st_multipoint(matrix(c(x1,y1), ncol = 2)), "POINT", )
2
p1 = st_multipoint(matrix(c(x1,y1), ncol = 2 )
p1 = st_multipoint(matrix(c(x1,y1), ncol = 2 ))
plot(p1)
p1 = st_multipoint(matrix(c(x1,y1), ncol = 2 ))
plot(p1)
b1 = st_buffer(st_point(c(x2,y2)), 4)
x1 = sample(seq(0,10,0.1), 10)
y1 = sample(seq(0,10,0.1), 2)
x2 = 5
y2 = 5
p1 = st_multipoint(matrix(c(x1,y1), ncol = 2 ))
b1 = st_buffer(st_point(c(x2,y2)), 4)
plot(b1, add = T)
inter = st_intersects(p1,b1)
inter
foo = matrix(c(x1,y1)
)
foo
foo = matrix(c(x1,y1), ncol = 2 )
as.list(foo)
?st_point
?runif
runif(1, min = 0, max = 10)
pts = st_sfc(lapply(1:10,function(x){st_point(c(runif(1,0,10),runif(1,0,10)))}))
plot(pts)
pts = st_sfc(lapply(1:10,function(x){st_point(c(runif(1,0,10),runif(1,0,10)))}))
cir = st_buffer(st_point(c(5,5)), 4)
inter = st_intersects(pts,cir)
inter
as.list(inter)
as.logical(inter)
inter_logical = isTRUE(as.logical(inter))
inter_logical
inter_logical = as.logical(inter) == TRUE
inter_logical
is.na(inter_logical) = FALSE
inter_logical
inter_logical[is.na(inter_logical)] = FALSE
inter_logical
pts1 = st_sfc(lapply(1:10,function(x){st_point(c(runif(1,0,10),runif(1,0,10)))}))
pts2 = st_sfc(lapply(1:5,function(x){st_point(c(runif(1,0,10),runif(1,0,10)))}))
cir = st_buffer(pts2, 3)
cir = st_union(cir)
inter = st_intersects(pts,cir)
inter
inter_logical = as.logical(inter)
inter_logical[is.na(inter_logical)] = FALSE
plot(pts1)
plot(cir, add = T)
plot(pts1[inter_logical], col = "red", add = T)
pts1 = st_sfc(lapply(1:10,function(x){st_point(c(runif(1,0,10),runif(1,0,10)))}))
pts2 = st_sfc(lapply(1:5,function(x){st_point(c(runif(1,0,10),runif(1,0,10)))}))
cir = st_buffer(pts2, 2)
cir = st_union(cir)
inter = st_intersects(pts,cir)
inter_logical = as.logical(inter)
inter_logical[is.na(inter_logical)] = FALSE
plot(pts1)
plot(cir, add = T)
plot(pts1[inter_logical], col = "red", add = T)
inter
pts1
pts1[inter_logical]
inter_logical
pts1[1]
pts1
pts1[[1]]
head(pts, 10)
pts1[1:10]
pts1[6:10]
inter = st_intersects(pts,cir)
inter
inter = st_intersects(cir,pts)
inter
pts1 = st_sfc(lapply(1:10,function(x){st_point(c(runif(1,0,10),runif(1,0,10)))}))
pts2 = st_sfc(lapply(1:5,function(x){st_point(c(runif(1,0,10),runif(1,0,10)))}))
cir = st_buffer(pts2, 2)
cir = st_union(cir)
inter = st_intersects(cir,pts1)
inter_logical = as.logical(inter)
inter_logical[is.na(inter_logical)] = FALSE
plot(pts1)
plot(cir, add = T)
plot(pts1[inter_logical], col = "red", add = T)
inter
inter = st_intersects(pts1,cir)
inter_logical = as.logical(inter)
inter_logical[is.na(inter_logical)] = FALSE
plot(pts1)
plot(cir, add = T)
plot(pts1[inter_logical], col = "red", add = T)
