{
    "contents" : "#Read in EHS and convert to RDS\nlibrary(foreign)\nlibrary(dplyr, lib.loc = \"M:/R/R-3.3.1/library\")\nlibrary(lazyeval, lib.loc = \"M:/R/R-3.3.1/library\")\ncurrent_year <- 2011\n\n\ninfld <- \"C:/Users/earmmor/OneDrive/OD/Glider - Private/WP2/Data/EHS/EHS-2011-SPSS/UKDA-7386-spss/spss/spss19/\"\n###############################################################################\n#Physical Table - only partical match\n##############################################################################\nphysical <- read.spss(paste0(infld,\"derived/physical_10plus11.sav\"),to.data.frame=TRUE)\nphysical <- physical[,c(\"aacode\",\"dwtypenx\",\"dwage9x\",\"floorx\",\"floor5x\",\"storeyx\",\"typerstr\",\n                        \"typewstr2\",\"typewin\",\"dblglaz4\",\"arnatx\",\"attic\",\n                        \"basement\",\"heat7x\",\"sysage\",\"mainfuel\",\"watersys\",\"boiler\",\n                        \"wallinsx\",\"wallcavx\",\"sap12\")]\nphysical$aacode <- as.character(physical$aacode)\nphysical$aacode <- substr(physical$aacode, 1, 8)\n#############################################################################\n#General Table - match when fixing names\n###########################################################################\ngeneral <- read.spss(paste0(infld,\"derived/general_10plus11.sav\"),to.data.frame=TRUE)\ngeneral <- general[,c(\"aacode\",\"aagpd1011\",\"tenure4x\",\"vacantx\",\"gorEHCS\",\"rumorph\",\"Imd1010\")]\nnames(general) <- c(\"aacode\",\"aagpd1011\",\"tenure4x\",\"vacantx\",\"GorEHCS\",\"rumorph\",\"imd\")\n\ngeneral$aacode <- as.character(general$aacode)\n##########################################################################\n#elevate Table\n####################################################################\nelevate <- read.spss(paste0(infld,\"physical/elevate.sav\"),to.data.frame=TRUE)\nelevate <- elevate[,c( \"aacode\",\"Felsolff\",\"Felpvff\",\"Felcavff\",\"Felextff\",\n                                \"Felsollf\",\"Felpvlf\",\"Felcavlf\",\"Felextlf\",\n                                \"Felsolrf\",\"Felpvrf\",\"Felcavrf\",\"Felextrf\",\n                                \"Felsolbf\",\"Felpvbf\",\"Felcavbf\",\"Felextbf\", \n                                \"felroofp\",\"Fvwpvbf\",\"Fvwpvlf\",\"Fvwpvrf\",\"Fvwpvff\",\"felcwiab\")]\n\nelevate$aacode <- as.character(elevate$aacode)\n############################################################################\n#Services Table\n############################################################################\nservices <- read.spss(paste0(infld,\"physical/services.sav\"),to.data.frame=TRUE)\nservices <- services[,c(\"aacode\",\"Finchtyp\",\"Finmhfue\",\"Finmhboi\",\"Finchbag\",\n                        \"Finchoff\",\"Finchthe\",\"Finchtim\",\"Finchove\",\"Finchrom\",\"Finchcon\",\"Finchtrv\",\"Finchtzc\",\"Finchdst\",\n                        \"Finoheat\",\"Finohphs\",\"Finohtyp\",\n                        \"Finwheat\", \"Finwhoty\",\"Finwhoac\",\"Finwhoag\",\"Finwhxpr\",\"Finwhxty\",\"Finwhxag\",\n                        \"Finwsipr\",\"Finwsiag\",\"Finwdipr\",\"Finwdiag\",\n                        \"Finwsppr\",\"Finwspty\",\"Finwspag\",\n                        \"Finwmppr\",\"Finwmpty\",\"Finwmpag\",\n                        \"Finwhlpr\",\"Finwhlty\",\"Finwhlag\",\n                        \"Finwhcyl\",\"Finwhsiz\",\"Finwhins\",\"Finwhmms\",\n                        \"Finwhcen\",\"Finwhthe\",\"Finlopos\",\"Flitypes\",\"Fliinsul\",\"Finintyp\",\"Flithick\")]\n\nservices$aacode <- as.character(services$aacode)\n\n###########################################################################\n#Around Table\n###########################################################################\naround <- read.spss(paste0(infld,\"physical/around.sav\"),to.data.frame=TRUE)\naround <- around[,c(\"aacode\",\"fcwipres\")]\n\naround$aacode <- as.character(around$aacode)\n\n#########################################################################\n#Combine\n########################################################################\ncombined <- left_join(physical,general, by = \"aacode\")\n\ntest <- left_join(general,physical, by = \"aacode\")\nsummary(physical$aacode %in% general$aacode)\n\n\n\n\n\n\ncombined <- left_join(combined,services, by = \"aacode\")\ncombined <- left_join(combined,elevate, by = \"aacode\")\ncombined <- left_join(combined,around, by = \"aacode\")\n#remove(physical,general,services,elevate)\n\n#######################################################################\n#roof table\n########################################################################\nroof <- combined[,c(\"aacode\",\"typerstr\",\"Flitypes\",\"Fliinsul\",\"Finintyp\",\"Flithick\",\"attic\",\n                    \"Felsolff\",\"Felpvff\",\n                    \"Felsollf\",\"Felpvlf\",\n                    \"Felsolrf\",\"Felpvrf\",\n                    \"Felsolbf\",\"Felpvbf\",\n                    \"felroofp\",\"Fvwpvbf\",\"Fvwpvlf\",\"Fvwpvrf\",\"Fvwpvff\")]\n\n#Remove NAs\nrem_na <- function(col){\n  for(x in 1:length(col)){\n    if(is.na(col[x])){\n      col[x]<- \"No\"\n    }\n  } \n  return(col)\n}\n\nroof$Felpvff <- rem_na(roof$Felpvff)\nroof$Felpvbf <- rem_na(roof$Felpvbf)\nroof$Felpvlf <- rem_na(roof$Felpvlf)\nroof$Felpvrf <- rem_na(roof$Felpvrf)\nroof$Felsolff <- rem_na(roof$Felsolff)\nroof$Felsolbf <- rem_na(roof$Felsolbf)\nroof$Felsollf <- rem_na(roof$Felsollf)\nroof$Felsolrf <- rem_na(roof$Felsolrf)\nroof$Fvwpvff <- rem_na(roof$Fvwpvff)\nroof$Fvwpvbf <- rem_na(roof$Fvwpvbf)\nroof$Fvwpvlf <- rem_na(roof$Fvwpvlf)\nroof$Fvwpvrf <- rem_na(roof$Fvwpvrf)\n\n#Summarise PV\nroof$PV <- NA\nfor(i in 1:nrow(roof)){\n  if((roof$Felpvff[i] == \"Yes\") || (roof$Felpvbf[i] == \"Yes\") || (roof$Felpvlf[i] == \"Yes\") || (roof$Felpvrf[i] == \"Yes\")){\n    roof$PV[i] <- TRUE\n  }else{\n    roof$PV[i] <- FALSE\n    }\n}\n\n#Summarise Solar\nroof$Solar <- NA\nfor(j in 1:nrow(roof)){\n  if((roof$Felsolff[j] == \"Yes\") || (roof$Felsolbf[j] == \"Yes\") || (roof$Felsollf[j] == \"Yes\") || (roof$Felsolrf[j] == \"Yes\")){\n    roof$Solar[j] <- TRUE\n  }else{\n    roof$Solar[j] <- FALSE\n  }\n}\n\n#Summarise Suitability\nroof$SolarSuit <- NA\nfor(k in 1:nrow(roof)){\n  if((roof$Fvwpvff[k] == \"Yes\") || (roof$Fvwpvbf[k] == \"Yes\") || (roof$Fvwpvlf[k] == \"Yes\") || (roof$Fvwpvrf[k] == \"Yes\")){\n    roof$SolarSuit [k] <- TRUE\n  }else{\n    roof$SolarSuit [k] <- FALSE\n  }\n}\n\nroof <- roof[,c(\"aacode\",\"typerstr\",\"Flitypes\",\"Fliinsul\",\"Finintyp\",\"Flithick\",\"felroofp\",\"attic\",\"PV\",\"Solar\",\"SolarSuit\")]\n\n##########################################################################\n#Walls Table\n###########################################################################\nwalls <- combined[,c(\"aacode\",\"typewstr2\",\"wallcavx\",\"Felextff\",\"Felextlf\",\"Felextrf\",\"Felextbf\",\"Felcavff\",\"Felcavlf\",\"Felcavrf\",\"Felcavbf\",\"felcwiab\",\"fcwipres\",\"wallinsx\")]\n\n#Cavity Walls\nwalls$cavity <- NA\nfor(a in 1:nrow(walls)){\n  if((walls$Felcavff[a] == \"Yes\" | is.na(walls$Felcavff[a])) &\n     (walls$Felcavbf[a] == \"Yes\" | is.na(walls$Felcavbf[a])) &\n     (walls$Felcavlf[a] == \"Yes\" | is.na(walls$Felcavlf[a])) &\n     (walls$Felcavrf[a] == \"Yes\" | is.na(walls$Felcavrf[a])) &\n     (walls$fcwipres[a] == \"Yes\" | is.na(walls$fcwipres[a]))\n     ){\n    walls$cavity[a] <- \"Yes\"\n  }else if((walls$Felcavff[a] == \"No\" | is.na(walls$Felcavff[a])) &\n           (walls$Felcavbf[a] == \"No\" | is.na(walls$Felcavbf[a])) &\n           (walls$Felcavlf[a] == \"No\" | is.na(walls$Felcavlf[a])) &\n           (walls$Felcavrf[a] == \"No\" | is.na(walls$Felcavrf[a])) &\n           (walls$fcwipres[a] == \"No\" | is.na(walls$fcwipres[a]))\n           ){\n    walls$cavity[a] <- \"No\"\n  }else{\n    walls$cavity[a] <- \"Part\"\n  }\n}\nwalls$cavity <- as.factor(walls$cavity)\n\nsummary(walls$fcwipres)\nsummary(walls$wallinsx)\nsummary(walls$cavity)\n\n\n\n#Plot\ncounts <- table(walls$wallinsx)\nbarplot(counts, main=\"External Wall Insualtion\", ylab=\"Number of Dwellings\")\n\n############################################################################################\n#Shape Table\n###########################################################################################\nshape <- combined[,c(\"aacode\",\"dwtypenx\",\"dwage9x\",\"floorx\",\"floor5x\",\"storeyx\",\"basement\",\"Finlopos\")]\nshape$type <- as.factor(paste0(shape$Finlopos,\" \",shape$dwtypenx))\nsummary(shape$type)\n\n#Plot\ncounts <- table(shape$type)\nbarplot(counts, main=\"Building Type\", ylab=\"Number of Dwellings\",las=2)\n\n\n#Create an exact age\nshape$age <- NA\nfor(r in 1:nrow(shape)){\n  if(shape$dwage9x[r] == \"pre 1850\"){\n    shape$age[r] <- 1849\n  }else if (shape$dwage9x[r] == \"1850 to 1899\"){\n    shape$age[r] <- sample(1850:1899, 1)\n  }else if (shape$dwage9x[r] == \"1900 to 1918\"){\n    shape$age[r] <- sample(1900:1918, 1)\n  }else if (shape$dwage9x[r] == \"1919 to 1944\"){\n    shape$age[r] <- sample(1919:1944, 1)\n  }else if (shape$dwage9x[r] == \"1945 to 1964\"){\n    shape$age[r] <- sample(1945:1964, 1)\n  }else if (shape$dwage9x[r] == \"1965 to 1974\"){\n    shape$age[r] <- sample(1965:1974, 1)\n  }else if (shape$dwage9x[r] == \"1975 to 1980\"){\n    shape$age[r] <- sample(1975:1980, 1)\n  }else if (shape$dwage9x[r] == \"1981 to 1990\"){\n    shape$age[r] <- sample(1981:1990, 1)\n  }else if (shape$dwage9x[r] == \"post 1990\"){\n    shape$age[r] <- sample(1990:2013, 1)\n  }else {\n    shape$age[r] <- 0\n  }\n}\n\n#Remove Unneeded Columns\nrems <- !names(shape) %in% c(\"Finlopos\",\"dwtypenx\",\"floorx\",\"dwage9x\")\nshape <- shape[,rems]\n\n############################################################################\n#Context Table\n###########################################################################\ncontext <- combined[c(\"aacode\",\"tenure4x\",\"vacantx\",\"GorEHCS\",\"rumorph\",\"imd\",\"arnatx\")]\n\n\n\n#########################################################################\n#Energy Table\n##########################################################################\nenergy <- combined[c(\"aacode\",\"Finchtyp\",\"mainfuel\",\"Finmhboi\",\"Finchbag\",\"sysage\",\"watersys\",\n                     \"Finchoff\",\"Finchthe\",\"Finchtim\",\"Finchove\",\"Finchrom\",\"Finchcon\",\"Finchtrv\",\"Finchtzc\",\"Finchdst\",\n                     \"Finohphs\",\n                     \"Finwheat\", \"Finwhoty\",\"Finwhoag\",\n                     \"Finwsipr\",\"Finwsiag\",\"Finwdipr\",\"Finwdiag\",\n                     \"Finwsppr\",\n                     \"Finwmppr\",\n                     \"Finwhlty\",\n                     \"Finwhcyl\",\"Finwhsiz\",\"Finwhins\",\"Finwhmms\"\n                     )]\n\n#Remove Nulls from Controls\n\nenergy$Finchoff <- rem_na(energy$Finchoff) #On/Off\nenergy$Finchtim <- rem_na(energy$Finchtim) #central timer\nenergy$Finchthe <- rem_na(energy$Finchthe) #Boiler Thermostat\nenergy$Finchove <- rem_na(energy$Finchove) #Manual Overide\nenergy$Finchrom <- rem_na(energy$Finchrom) #Room Thermostat\nenergy$Finchcon <- rem_na(energy$Finchcon) #Radiator Control\nenergy$Finchtrv <- rem_na(energy$Finchtrv) #Thermostatic Radiator Conrol\nenergy$Finchtzc <- rem_na(energy$Finchtzc) #Time and Temp Zone\nenergy$Finchdst <- rem_na(energy$Finchdst) #Delayed Start\n\nenergy$control <- NA\n\n# Energy Control Levle cumulative number of controls had\n#L7 - Delay Start, L6 - Time and temp zones, L5 - Room Thermostat, L4 - Boiler Thermostat, L3 - Manual Overide, L2 - Central Timer, L1 - On/Off, L0 - None, L9 - Other combination\n\nfor(l in 1:nrow(energy)){\n  if(energy$Finchtim[l] == \"Yes\" && energy$Finchdst[l] == \"Yes\" && energy$Finchtzc[l] == \"Yes\" && energy$Finchrom[l] == \"Yes\" && energy$Finchthe[l] == \"Yes\" && energy$Finchove[l] == \"Yes\" && energy$Finchoff[l] == \"Yes\"){\n    energy$control[l] <- 7\n  } else if (energy$Finchtim[l] == \"Yes\" && energy$Finchtzc[l] == \"Yes\" && energy$Finchrom[l] == \"Yes\" && energy$Finchthe[l] == \"Yes\" && energy$Finchove[l] == \"Yes\" && energy$Finchoff[l] == \"Yes\"){\n    energy$control[l] <- 6\n  } else if (energy$Finchtim[l] == \"Yes\" && energy$Finchrom[l] == \"Yes\" && energy$Finchthe[l] == \"Yes\" && energy$Finchove[l] == \"Yes\" && energy$Finchoff[l] == \"Yes\"){\n    energy$control[l] <- 5\n  } else if (energy$Finchtim[l] == \"Yes\" && energy$Finchthe[l] == \"Yes\" && energy$Finchove[l] == \"Yes\" && energy$Finchoff[l] == \"Yes\"){\n    energy$control[l] <- 4\n  } else if (energy$Finchtim[l] == \"Yes\" && energy$Finchove[l] == \"Yes\" && energy$Finchoff[l] == \"Yes\"){\n    energy$control[l] <- 3\n  } else if (energy$Finchtim[l] == \"Yes\" && energy$Finchoff[l] == \"Yes\"){\n    energy$control[l] <- 2\n  } else if (energy$Finchoff[l] == \"Yes\"){\n    energy$control[l] <- 1    \n  } else if (energy$Finchtim[l] == \"No\" && energy$Finchdst[l] == \"No\" && energy$Finchtzc[l] == \"No\" && energy$Finchrom[l] == \"No\" && energy$Finchthe[l] == \"No\" && energy$Finchove[l] == \"No\" && energy$Finchoff[l] == \"No\"){\n    energy$control[l] <- 0\n  } else {\n    energy$control[l] <- 9\n  }\n}\n\ncounts <- table(energy$control)\nbarplot(counts, main=\"Control Level\", ylab=\"Number of Dwellings\")\n\n#Radiator Control Level\n#L2 - TRVs, L1 - Controls, L0 - None\n\nenergy$radcontrol <- NA\nfor(m in 1:nrow(energy)){\n  if(energy$Finchtrv[m] == \"Yes\"){\n    energy$radcontrol[m] <- 2\n  } else if (energy$Finchtrv[m] == \"No\" && energy$Finchcon[m] == \"Yes\"){\n    energy$radcontrol[m] <- 1\n  } else {\n    energy$radcontrol[m] <- 0\n  }\n}\n\n#Plot\ncounts <- table(energy$radcontrol)\nbarplot(counts, main=\"Radiator Control Level\", ylab=\"Number of Dwellings\")\n\n\n#Remove Unneeded Columns\nrems <- !names(energy) %in% c(\"Finchtim\",\"Finchoff\",\"Finchthe\",\"Finchove\",\"Finchrom\",\"Finchcon\",\"Finchtrv\",\"Finchtzc\",\"Finchdst\")\nenergy <- energy[,rems]\n\n#Simplify Water Cylinder and Imersion Heater\n\nenergy$Finwsipr <- rem_na(energy$Finwsipr) #Single Immersion\nenergy$Finwdipr <- rem_na(energy$Finwdipr) #Dual Immersion\nenergy$Finwhcyl <- rem_na(energy$Finwhcyl) #Water Cyclinder\n\nenergy$tank <-NA\nenergy$immersage <- NA\nfor(n in 1:nrow(energy)){\n  if((energy$Finwsipr[n] == \"Yes\" || energy$Finwdipr[n] == \"Yes\") && energy$Finwhcyl[n] == \"Yes\"){\n    energy$tank[n] <- \"Tank with Immersion Heater\"\n    if(is.na(energy$Finwsiag[n])){\n      energy$immersage[n] <- energy$Finwdiag[n]\n    }else{\n      energy$immersage[n] <- energy$Finwsiag[n]\n    }\n  }else if((energy$Finwsipr[n] == \"No\" && energy$Finwdipr[n] == \"No\") && energy$Finwhcyl[n] == \"Yes\"){\n    energy$tank[n] <- \"Tank without Immersion Heater\"\n  }else{\n    energy$tank[n] <- \"No Tank\"\n  }\n}\n\n#Remove Unneeded Columns\nrems <- !names(energy) %in% c(\"Finwsipr\",\"Finwdipr\",\"Finwhcyl\",\"Finwdiag\",\"Finwsiag\")\nenergy <- energy[,rems]\n\n#Plot\ncounts <- table(energy$tank)\nbarplot(counts, main=\"Water Tank Type\", ylab=\"Number of Dwellings\")\n\n#Simplify Instaneous Heater\nenergy$Finwmppr <- rem_na(energy$Finwmppr) #Mulitpoint\nenergy$Finwsppr <- rem_na(energy$Finwsppr) #Single Point\n\nenergy$instant <- NA\nfor(o in 1:nrow(energy)){\n  if(energy$Finwmppr[o] == \"Yes\" && energy$Finwsppr[o] == \"Yes\"){\n    energy$instant[o] <- \"Yes\"\n  }else if(energy$Finwmppr[o] == \"No\" && energy$Finwsppr[o] == \"Yes\"){\n    energy$instant[o] <- \"Yes\"\n  }else if(energy$Finwmppr[o] == \"Yes\" && energy$Finwsppr[o] == \"No\"){\n    energy$instant[o] <- \"Yes\"\n  }else{\n    energy$instant[o] <- \"No\"\n  }\n}\n\n#Remove Unneeded Columns\nrems <- !names(energy) %in% c(\"Finwmppr\",\"Finwsppr\")\nenergy <- energy[,rems]\n\n#Plot\ncounts <- table(energy$instant)\nbarplot(counts, main=\"Instaneous Water Heater\", ylab=\"Number of Dwellings\")\n\n\nlevels(energy$Finchtyp) <- c(levels(energy$Finchtyp),\"No Answer\")\n\n#Clean Main ones\nfor(q in 1:nrow(energy)){\n  if(is.na(energy$Finmhboi[q])){\n    energy$Finmhboi[q] <- \"No boiler\"\n  }\n  if(is.na(energy$Finchtyp[q])){\n    energy$Finchtyp[q] <- \"No Answer\"\n  }\n  \n}\n\n\n#Mulit-row per dwelling tables\n######################################################################\n#Doors Table\n######################################################################\ndoors <- read.spss(paste0(infld,\"physical/doors.sav\"),to.data.frame=TRUE)\ndoors <- doors[,c(\"aacode\",\"type\",\"Fexdf1no\",\"Fexdf1ag\",\n                                  \"Fexdf2no\",\"Fexdf2ag\")]\ndoors <- doors[doors$Fexdf1no > 0 | doors$Fexdf2no > 0 ,]\ndoors$number <- doors$Fexdf1no + doors$Fexdf2no\nsummary((doors$Fexdf1ag != doors$Fexdf2ag) & (doors$Fexdf1no != 0 | doors$Fexdf2no != 0)) #2/3 have the same age front and back when accounting for only on front or back\n\n#Remove NAs\nrem_na_0 <- function(col){\n  for(x in 1:length(col)){\n    if(is.na(col[x])){\n      col[x]<- 0\n    }\n  } \n  return(col)\n}\ndoors$Fexdf1ag <- rem_na_0(doors$Fexdf1ag)\ndoors$Fexdf2ag <- rem_na_0(doors$Fexdf2ag)\ndoors$age <- pmax(doors$Fexdf1ag,doors$Fexdf2ag)\n\n#Remove Unneeded Columns\nrems <- !names(doors) %in% c(\"Fexdf1ag\",\"Fexdf2ag\",\"Fexdf1no\",\"Fexdf2no\")\ndoors <- doors[,rems]\ndoors <- reshape(doors, direction = \"wide\", idvar=\"aacode\", timevar=\"type\")\n\ndoors$number.Wood <- rem_na_0(doors$number.Wood)\ndoors$number.UPVC <- rem_na_0(doors$number.UPVC)\ndoors$number.Metal <- rem_na_0(doors$number.Metal)\ndoors$age.Wood <- rem_na_0(doors$age.Wood)\ndoors$age.UPVC <- rem_na_0(doors$age.UPVC)\ndoors$age.Metal <- rem_na_0(doors$age.Metal)\n\ndoors$doornumb <- doors$number.Wood + doors$number.UPVC + doors$number.Metal\ndoors$doorage <- pmax(doors$age.Wood, doors$age.UPVC, doors$age.Metal)\n\ndoors <- doors[,c(\"aacode\",\"doornumb\",\"doorage\")]\n\n################################################################################\n#Windows Table\n#############################################################################\nwindows <- read.spss(paste0(infld,\"physical/windows.sav\"),to.data.frame=TRUE)\nwindows <- windows[,c(\"aacode\",\"type\",\"Fexwn1no\",\"Fexwn1ag\",\n                                      \"Fexwn2no\",\"Fexwn2ag\")]\nwindows <- windows[windows$Fexwn1no > 0 | windows$Fexwn2no > 0,]\n\nwindows$numb <- windows$Fexwn1no + windows$Fexwn2no\nsummary((windows$Fexwn1ag != windows$Fexwn2ag) & (windows$Fexwn1no != 0 | windows$Fexwn2no != 0)) #2/3 have the same age front and back when accounting for only on front or back\n\nwindows$Fexwn1ag <- rem_na_0(windows$Fexwn1ag)\nwindows$Fexwn2ag <- rem_na_0(windows$Fexwn2ag)\nwindows$age <- pmax(windows$Fexwn1ag,windows$Fexwn2ag)\n\n#Remove Unneeded Columns\nrems <- !names(windows) %in% c(\"Fexwn1ag\",\"Fexwn2ag\",\"Fexwn1no\",\"Fexwn2no\")\nwindows <- windows[,rems]\nwindows <- reshape(windows, direction = \"wide\", idvar=\"aacode\", timevar=\"type\")\n\nwindows$`numb.Double-glazed- wood`  <- rem_na_0(windows$`numb.Double-glazed- wood`)  \nwindows$`age.Double-glazed- wood` <- rem_na_0(windows$`age.Double-glazed- wood`)\nwindows$`numb.Double-glazed- UPVC` <- rem_na_0(windows$`numb.Double-glazed- UPVC`)\nwindows$`age.Double-glazed- UPVC` <- rem_na_0(windows$`age.Double-glazed- UPVC`)\nwindows$`numb.Single-glazed- UPVC` <- rem_na_0(windows$`numb.Single-glazed- UPVC`)\nwindows$`age.Single-glazed- UPVC` <- rem_na_0(windows$`age.Single-glazed- UPVC`)\nwindows$`numb.Single-glazed- wood casement` <- rem_na_0(windows$`numb.Single-glazed- wood casement`)\nwindows$`age.Single-glazed- wood casement`  <- rem_na_0(windows$`age.Single-glazed- wood casement`)\nwindows$`numb.Double-glazed- metal`  <- rem_na_0(windows$`numb.Double-glazed- metal`)\nwindows$`age.Double-glazed- metal`  <- rem_na_0(windows$`age.Double-glazed- metal`)\nwindows$`numb.Single-glazed- wood sash` <- rem_na_0(windows$`numb.Single-glazed- wood sash`)\nwindows$`age.Single-glazed- wood sash` <- rem_na_0(windows$`age.Single-glazed- wood sash`)\nwindows$`numb.Single-glazed- metal` <- rem_na_0(windows$`numb.Single-glazed- metal`)\nwindows$`age.Single-glazed- metal` <- rem_na_0(windows$`age.Single-glazed- metal`)\n\nwindows$dblglaze <- windows$`numb.Double-glazed- wood` + windows$`numb.Double-glazed- UPVC` + windows$`numb.Double-glazed- metal`\nwindows$dblglazeage <- pmax(windows$`age.Double-glazed- wood`,windows$`age.Double-glazed- UPVC`,windows$`age.Double-glazed- metal`)\nwindows$sngglaze <- windows$`numb.Single-glazed- UPVC` + windows$`numb.Single-glazed- wood casement` + windows$`numb.Single-glazed- wood sash` + windows$`numb.Single-glazed- metal`\nwindows$sngglazeage <- pmax(windows$`age.Single-glazed- UPVC`,windows$`age.Single-glazed- wood casement`,windows$`age.Single-glazed- wood sash`,windows$`age.Single-glazed- metal`)\n\n#Remove Unneeded Columns\nwindows <- windows[,c(\"aacode\",\"dblglaze\",\"dblglazeage\",\"sngglaze\",\"sngglazeage\")]\n\n#####################################################################\n#Join back into a master table\n###################################################################\n\nremove(combined)\n\ncombined_2011 <- left_join(context,shape, by = \"aacode\")\ncombined_2011 <- left_join(combined_2011,walls, by = \"aacode\")\ncombined_2011 <- left_join(combined_2011,roof, by = \"aacode\")\ncombined_2011 <- left_join(combined_2011,windows, by = \"aacode\")\ncombined_2011 <- left_join(combined_2011,doors, by = \"aacode\")\ncombined_2011 <- left_join(combined_2011,energy, by = \"aacode\")\n\nremove(around,context,doors,elevate,general,physical,roof,services,shape,test,uni,test2, walls, windows)\nwrite.csv(combined_2011,\"combined_2011.csv\")\n",
    "created" : 1490208962722.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1355162124",
    "id" : "982317B6",
    "lastKnownWriteTime" : 1489669890,
    "path" : "C:/Users/earmmor/Git/glider/Glider/code/ehs2rds_2011b.R",
    "project_path" : "code/ehs2rds_2011b.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "type" : "r_source"
}